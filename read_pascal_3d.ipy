import os
import scipy.io
import numpy as np
print(os.listdir('PASCAL3D+_release1.0'))
# print(os.listdir('PASCAL3D+_release1.0/Annotations/sofa_pascal'))
# read scipy.io.loadmat
loaded = scipy.io.loadmat('PASCAL3D+_release1.0/Annotations/sofa_pascal/2011_001974.mat')

"""
structure of loaded:
loaded['record']
"""
# print(loaded['record'].__class__)
print(loaded['record'].__class__)
print(loaded['record'].dtype)
print(loaded['record'].shape)
print(loaded['record']['objects'][0,0][0,0].shape)
print(loaded['record']['objects'][0,0][0,0])
# print(loaded['record']['intrinsic_matrix'][0,0].shape)

"""
from the paper:
The annotation of an object contains the azimuth, ele-
vation and distance of the camera pose in 3D
"""

def parse_record():
    pass
print(os.listdir('PASCAL3D+_release1.0/Annotations/sofa_pascal/'))
loaded = scipy.io.loadmat('PASCAL3D+_release1.0/Annotations/sofa_pascal/2011_001974.mat')
record = loaded['record']['objects'][0,0][0,0]
categories = record[0]
is_frontal = record[1]
print(categories)
parse_record()

for ri in record:
    print(ri)
    input('')

if False:
    def spherical_to_cartesian(azimuth, elevation):
        x = np.cos(azimuth) * np.cos(elevation)
        y = np.sin(azimuth) * np.cos(elevation)
        z = np.sin(elevation)
        return np.array([x, y, z])

    def camera_pose_from_spherical(azimuth, elevation, distance, position, K):
        # compute rotation matrix
        direction = spherical_to_cartesian(azimuth, elevation)
        up = np.array([0, 0, 1])
        right = np.cross(up, direction)
        R = np.vstack((right, np.cross(direction, right), direction)).T

        # compute translation vector
        t = -distance * direction + position

        # compute camera matrix
        P = np.hstack((R, t.reshape(3, 1)))
        camera_matrix = K.dot(P)

        # compute camera pose
        rotation_matrix = R
        translation_vector = t
        camera_pose = np.hstack((rotation_matrix, translation_vector.reshape(3, 1)))

        return camera_pose, camera_matrix

    camera_pose_from_spherical(azimuth, elevation, distance, position, K)